<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老毛的个人博客</title>
  <subtitle>生命不息，学习不止</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Mao-x-w.github.io/"/>
  <updated>2017-03-15T09:01:55.454Z</updated>
  <id>http://Mao-x-w.github.io/</id>
  
  <author>
    <name>Lao Mao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SimpleMvp_Data</title>
    <link href="http://Mao-x-w.github.io/2017/03/15/SimpleMvp-Data/"/>
    <id>http://Mao-x-w.github.io/2017/03/15/SimpleMvp-Data/</id>
    <published>2017-03-15T08:54:52.000Z</published>
    <updated>2017-03-15T09:01:55.454Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对自己使用的项目SimpleMvp的Data层讲解，项目源码见github(<a href="https://github.com/Mao-x-w/SimpleMvp" target="_blank" rel="external">https://github.com/Mao-x-w/SimpleMvp</a>), 该项目是在git大神的android10的项目Android-CleanArchitecture基础上进行的更改，有兴趣的可以直接看该大神的源码：（<a href="https://github.com/android10/Android-CleanArchitecture）" target="_blank" rel="external">https://github.com/android10/Android-CleanArchitecture）</a></p>
<p>首先说一下自己对继承、实现的体会，这些只是我自己为了加深记忆写的，对于我来说很有用，因为，我感觉人的大脑就像一个巨大的Map库，当我们看到一些东西的时候，实际对于大脑而言只是一个key,大脑会拿这个key去找对应的value，而下面这些体会，可以说就是对我之前踩的一些坑的key，看到这些描述，我就能想到当时是怎么出错的，走的那些弯路。当然，可能对大伙用处不大，感觉无用的请自动略过。直接看SimpleMvp的Data层讲解</p>
<h3 id="继承、实现的体会"><a href="#继承、实现的体会" class="headerlink" title="继承、实现的体会"></a>继承、实现的体会</h3><ul>
<li><p>定义一个接口之后，可以有多个类去实现它，那么最后当你用的时候就可以根据你调用哪一个，从而确定出你使用的对象，接口是不能直接创建对象的，所以，你最终使用的肯定是某个具体的实现。那么，无论有多少个类实现了这个接口都是没有关系的，最终使用的时候，看你调用的是哪一个。</p>
<p>  例如：List list=new ArrayList();而不能List list=new List();除非自己去实现List，就可以这样写：<br>  List list=new List{……}</p>
<p>  所以，要时刻保持清醒，调用了一个接口，本质上是调用了他的一个实现类，具体是哪一个，代码中找</p>
</li>
<li><p>继承，可以在共有的功能基础上扩展出来新功能。这样的好处是各个地方使用的是自己的继承过来的扩展类，当有多个地方使用这个类的时候，不同的功能都通过调用自己的类，而不去基类中找，就不会污染基类，增强了基类的扩展型，以及使用型。 </p>
</li>
</ul>
<h3 id="SimpleMvp中Data层中的具体实现"><a href="#SimpleMvp中Data层中的具体实现" class="headerlink" title="SimpleMvp中Data层中的具体实现"></a>SimpleMvp中Data层中的具体实现</h3><p>Data层与Domain层对接是通过实现Domain层的接口，而domain层直接调用接口中的方法，就相当于拿到了Data层返回的数据，下面着重讲Data层。大家看的时候尽量对照着源码，这样学习比较省力，当然代码我也贴了出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Singleton</div><div class="line">public class GeneralRepositoryImpl extends RepositoryImpl&lt;IGeneralDataStore, GeneralDataStoreFactory&gt; implements IGeneralRepository &#123;</div><div class="line"></div><div class="line">    private GitUserEntityMapper mGMapper;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    public GeneralRepositoryImpl(GeneralDataStoreFactory dataStoreFactory, GitUserEntityMapper gMapper) &#123;</div><div class="line">        super(dataStoreFactory);</div><div class="line">        mGMapper = gMapper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Observable&lt;List&lt;GitUserModel&gt;&gt; getGitUsers() &#123;</div><div class="line">        return getNetDataStore().getGitUsers().map(mGMapper::transformTo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>GeneralRepositoryImpl实现了IGeneralRepository接口，从而实现了其中的getGitUsers方法，而在该方法中调用getNetDataStore().getGitUsers()是调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface IGeneralDataStore extends IDataStore &#123;</div><div class="line"></div><div class="line">    Observable&lt;List&lt;GitUserEntity&gt;&gt; getGitUsers();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IGeneralDataStore接口中的方法（本质是调用某个具体实现类中的方法），而getNetDataStore()获取到的是该接口的一个具体实现类NetGeneralDataStore。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Singleton</div><div class="line">public class NetGeneralDataStore extends NetDataStoreImpl&lt;IGeneralNet,IGeneralCache&gt; implements IGeneralDataStore &#123;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    public NetGeneralDataStore(IGeneralNet service, IGeneralCache cache) &#123;</div><div class="line">        super(service, cache);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Observable&lt;List&lt;GitUserEntity&gt;&gt; getGitUsers() &#123;</div><div class="line">        return getService().getGitUsers();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体为什么是调用的这个实现类而不是其他实现类，这个在GeneralRepositoryImpl的父类RepositoryImpl中定义的，有兴趣可以自己研究一下，就不描述了。</p>
<p>现在我们再来整理一下头绪，我们想从Data层获取数据，首先调用IGeneralRepository的具体实现GeneralRepositoryImpl中的getGitUsers()方法，然后该方法又去调用IGeneralDataStore的具体实现NetGeneralDataStore中的getGitUsers()方法。（具体为什么要这样写，而不是直接调用访问网络接口，把数据直接传递给上层，最后会加以描述）</p>
<p>现在我们就可以把注意力放到NetGeneralDataStore类上了，我们可以看到它是通过getService().getGitUsers()来返回需要的数据，按住ctrl键+鼠标左键点击getGitUsers()方法，发现又跳回了上面的那个接口IGeneralDataStore中，这是什么情况？自己本身就实现IGeneralDataStore接口中的方法，而这个方法又调用了这个接口的方法，不会递归 么？？？ 答案是不会的：关键是getService()方法。 通过研究代码发现getService得到的是IGeneralDataStore接口的另一个实现类（感兴趣的自己研究）GeneralRetrofitNetImpl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class GeneralRetrofitNetImpl extends BaseRetrofitNetImpl&lt;IGeneralRetrofit&gt; implements IGeneralNet &#123;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    public GeneralRetrofitNetImpl() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Observable&lt;List&lt;GitUserEntity&gt;&gt; getGitUsers() &#123;</div><div class="line">        return getService().getGitUsers();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这里的理解，本文的最开头的一些体会就起到了作用，应该很好理解吧，哈哈。我当时是想了好久好久才想明白的<br>，大家应该比我牛逼，很快就理解了吧，不理解的可以再看一下开头的一些体会。</p>
<p>好了，现在我们定位到了GeneralRetrofitNetImpl类中了，可以看到它里面也有getService().getGitUsers()，同理，点击ctrl键+鼠标左键点击getGitUsers()方法，定位到了IGeneralRetrofit接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public interface IGeneralRetrofit &#123;</div><div class="line"></div><div class="line">    @GET(Constant.HttpHost.GIT_GOD_USERS)</div><div class="line">    Observable&lt;List&lt;GitUserEntity&gt;&gt; getGitUsers();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们终于来到了调用终点，当然终点也可能是另一个起点，那就是这个接口怎么就能请求服务器数据了，这就涉及到了Retrofit网络框架了，相信大家这块应该都会吧，不会哥们自己去研究下吧。</p>
<p>下面通过一张图来加深一下理解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sequenceDiagram</div><div class="line">GeneralRepositoryImpl-&gt;&gt;NetGeneralDataStore: 调用该类getGitUsers()</div><div class="line">NetGeneralDataStore-&gt;&gt;GeneralRepositoryImpl: 将数据返回给调用者</div><div class="line"></div><div class="line">NetGeneralDataStore-&gt;&gt;GeneralRetrofitNetImpl: 调用该类getGitUsers()</div><div class="line">GeneralRetrofitNetImpl-&gt;&gt;NetGeneralDataStore: 将数据返回给调用者</div><div class="line"></div><div class="line">GeneralRetrofitNetImpl-&gt;&gt;IGeneralRetrofit:  调用该类getGitUsers()</div><div class="line">IGeneralRetrofit-&gt;&gt;GeneralRetrofitNetImpl: 将数据返回给调用者</div></pre></td></tr></table></figure>
<p>最后，我们就来看一下为什么要这样设计，而不是直接那服务器数据返回给上一层？</p>
<p>这当然是为了解耦，加强扩展型，试想一下，假如我们某一天感觉Retrofit网络框架不好用了，要换框架了，那么我们只需要在GeneralRetrofitNetImpl和IGeneralRetrofit处做调整，按原来格式把数据返回就行，其他地方什么都不用动。又假如，产品来了，说这块数据是死的、而且数据量大，请求网络时间太长，要把json数据放到本地，那么我们只需要在GeneralRepositoryImpl类中getNetDataStore().getGitUsers()改为getLocalDataStore.getGitUsers（从本地取），或者getCacheDataStore.getGitUsers(从缓存取)，再或者getDBDateStore.getGitUsers(从数据库取)。是不是很灵活啊，实际中灵活的地方还有很多，就不一一举例了，自己体会吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是对自己使用的项目SimpleMvp的Data层讲解，项目源码见github(&lt;a href=&quot;https://github.com/Mao-x-w/SimpleMvp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Mao-x-w.github.io/2017/03/07/hello-world/"/>
    <id>http://Mao-x-w.github.io/2017/03/07/hello-world/</id>
    <published>2017-03-07T09:07:08.724Z</published>
    <updated>2017-03-07T09:07:08.724Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
